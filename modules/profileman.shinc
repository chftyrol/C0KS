#!/bin/bash

# Prevent multiple inclusion.
if test "${_INCLUDED_PROFILEMAN_SHINC_:+included}" = "included"
then
  return 0
fi
_INCLUDED_PROFILEMAN_SHINC_=1

source "${MODULES_DIR}/logging.shinc"
source "${MODULES_DIR}/constants.shinc"

load-profile()
{
  # Description: parse specified profile and load profile preferences.
  # Parameters: $1 -- the file name of the profile to load.
  debug "Trying to load profile $1"
  if test -s "$1" -a -r "$1" # if file exists, is not empty and readable
  then
    # Parse and set CURRENT_PROFILE_PREFERENCES accordingly.
    # The CURRENT_PROFILE_PREFERENCES variable is defined in init.shinc.
    debug "Profile found. Parsing..."
    local line
    while read line
    do
      if echo ${line} | grep -F '=' &>/dev/null
      then
        # Regex removes whitespace from start and end of field name (so user can use key=val or key = val).
        local field=$(echo "${line}" | awk -F"=" '{gsub("^\\s*|\\s*$", "", $1); print $1}')
        # Ensure that the key specified in the profile is on of those we are looking for.
        # If so, set the preference value.
        # Regex removes whitespace from start and end as well as possible double or single quotation marks.
        local child
        test $(echo ${!CURRENT_PROFILE_PREFERENCES[@]} | awk '{print(match($0, child))}' child="${CURRENT_PROFILE_PREFERENCES[${field}]}") -gt 0 &&
          {
            CURRENT_PROFILE_PREFERENCES[${field}]=$(echo "${line}" | awk -F"=" '{$1=""; gsub("^\\s*[\"'"'"']?|[\"'"'"']?\\s*$", ""); print $0}')
            debug "Parsed value ${field} : ${CURRENT_PROFILE_PREFERENCES[${field}]}."
          } ||
          {
            warning "Field ${field} in profile $1 does not match any valid c0ks parameter."
          }
      fi
    done < "$1"
    debug "Profile parsed."
    debug "Checking if all necessary entries were supplied."
    # Check if all necessary entries were supplied.
    local key
    for key in ${!CURRENT_PROFILE_PREFERENCES[@]}
    do
      if test -z ${CURRENT_PROFILE_PREFERENCES[${key}]} 
      then
        if test ${key} != "LOG_FILE" -a ${key} != "PASS_ENTRY" -a ${key} != "REMOTE_PASS"
        then
          error "Profile $1 did not specify the ${key}. I can't continue."
          quit INVALID_PROFILE
        fi
      fi
    done
    debug "Done, profile loaded successfully."
  else
    error "Invalid profile file $1 specified."
    quit INVALID_PROFILE
  fi
}

set-default-profile()
{
  # Description: save to $DEFAULT_PROFILE the default profile file name.
  # Parameters: $1 -- the file name of the profile to save.
  # If $CONF_DIR doesn't exist, create it.
  if test ! -e "${CONF_DIR}"
  then
    debug "Directory ${CONF_DIR} does not exist. Creating it."
    mkdir -p "${CONF_DIR}"
  fi
  # Save the profile file name to the $DEFAULT_PROFILE file.
  echo "$1" > "${DEFAULT_PROFILE}"
  debug "Default profile set to $1."
}
